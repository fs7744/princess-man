env ETCD_HOST;
env ETCD_PREFIX;
env ETCD_TIMEOUT;
pid        tmp/nginx.pid;
error_log logs/error.log info;
user root;

worker_processes  1;

events {
    worker_connections  1024;
}

stream {
    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/deps/share/lua/5.1/?/init.lua;$prefix/?.lua;$prefix/?/init.lua;;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;";

    lua_socket_log_errors off;

    #lua_ssl_trusted_certificate {* ssl.ssl_trusted_certificate *};

    upstream man_backend {
        server 127.0.0.1:80;
        balancer_by_lua_block {
            Man.balancer()
        }
    }

    init_by_lua_block {
        Man = require 'man'
        Man.init()
    }

    # init_worker_by_lua_block {
    #     Man.init_worker()
    # }

    server {
        listen 8222 reuseport;
        #listen 8223 udp reuseport;

        # ssl_certificate      {* ssl.ssl_cert *};
        # ssl_certificate_key  {* ssl.ssl_cert_key *};

        # ssl_certificate_by_lua_block {
        #     Man.stream_ssl()
        # }

        #proxy_protocol on;

        preread_by_lua_block {
            Man.stream_preread()
        }

        proxy_pass man_backend;

        log_by_lua_block {
            Man.stream_log()
        }
    }
}